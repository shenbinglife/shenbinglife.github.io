{"posts":[{"title":"使用Hexo","text":"这是一个有关Hexo博客的写作语法文章 写作创建一篇文章hexo new 2023-10-11-使用Hexo 插入图片![062005161512378.jpg](2023-10-11-使用Hexo/062005161512378.jpg) 文档分类和标签定义---title: 使用Hexodate: 2023-10-11 18:40:44tags: - 教程 - hexocategories: 教程--- 文本居中文本居中效果演示 &lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;{% centerquote %}blah blah blah{% endcenterquote %}&lt;!-- 标签别名 --&gt;{% cq %} blah blah blah {% endcq %} bootstrap","link":"/2023-10-11-%E4%BD%BF%E7%94%A8Hexo/"},{"title":"如何删除Git提交记录中的大文件","text":"当Git仓库中存在大文件，会持续保留在Git历史中，下面是对删除这些大文件的一些解决方案 已提交到git缓存删除缓存 git rm --cached video.mp4 已提交到本地分支reset到上一个版本 git reset HEAD^git gc 已提交到远程分支## 删除本地文件和历史git gcgit filter-repo --path-glob video.mp4 --invert-paths --forcegit gc --aggressive## 推送到远程分支git remote add origin git@ticktechman.github.com:ticktechman/demo.gitgit push --all --forcegit push --tags --force git filter-repo不是原生git命令，是一个拓展，从本地记录中寻找和指定文件相关的提交，将其全部删除，重写整个历史。 git filter repo仓库 对未知大文件的远程仓库清理# 寻找大文件git gcgit rev-list --objects --all |grep -f (git verify-pack -v .git/objects/pack/*.idx | grep blob | sort -k 3 -n |cut -f 1 -d &quot; &quot; | tail -10)# 或者使用该拓展命令获取前10大小的blob文件， https://github.com/ticktechman/git-commandsgit largefiles -t 10# 从本地中删除大文件并重写历史git filter-repo --path-glob xxx.mp4 --invert-paths --forcegit gc --aggressive## 推送到远程分支git remote add origin git@ticktechman.github.com:ticktechman/demo.gitgit push --all --forcegit push --tags --force","link":"/2023-10-12-%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4Git%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6/"},{"title":"软件工程师在做什么？架构师在做什么？","text":"现在的软件工程师的处境太难了，他们要工作的内容既多又杂，而架构师并没有承担起应有的责任。 在此，我说说我对目前工作中架构师和工程师的理解 软件工程师理想中的软件工程师要做的内容： 接收需求 实现代码 单元测试 实际上软件工程师的要做的内容： 丰富和改善需求内容（产品经理？需求分析师？） 架构设计，包括软硬件选型、服务间调用、日志系统、监控系统（架构师？平台支持？） 编程架构（架构师？项目Leader？） 实现代码（软件工程师本职 √） 单元测试（基本无了，从没遇见过写单元测试的） 功能自测（测试呢？） 软件发布（CI/CD？） 软件运维，包括配置告警和监控，还有长期维护（运维？售后？） 架构师 PPT PPT 还是PPT 反思经常出现的一个现象是什么？ 架构师或者产品经理拿着他的PPT去宣传软件工程师的系统，然后用户使用的时候才发现，架构师对系统功能的介绍完全是南辕北辙，反而让软件工程师背锅。 为什么呢？ 一个是架构师或者说产品经理从来没有一个检验的标准，就是说大部分的人入职完全是靠PPT和演讲入职的。而他们入职后，很多软件工程师就会发现他们在整个项目中并没有输出任何有用的信息，不是说他们的岗位应该被干掉，而是说大部分在这个岗位的人都没有符合的才能。 没有整理出完善的需求文档，需要软件工程师自己对接 没有可复用的软件架构，需要软件工程师自己搭建 没有可复用的建模工具，需要软件工程师自己建模 没有配套的测试、CI/CD、运维，一切都是软件工程师自己埋头苦干 甚至于，架构师说：软件工程师，你把你的软件写一份部署文档、使用文档、交接文档吧。。。。 软件工程师的反击 我在忙，找别人吧 反正软件工程师和项目经理之间不可调和的矛盾由此展开。 拨乱反正架构师或者假如说你是项目Leader，你到底应该输出什么？ 需求文档，甚至接口文档、使用文档 软件架构，包括源码的框架、个别复杂用例的设计流程图、多系统间的调用关系、流量管理、权限设计等等 提供软件的安装和部署方式 提供日志和监控系统 当然，上面的活不全是架构师的活，但是应该是架构师在介入一个系统时应该考虑和解决的事；上面所需要的Devops系统也并不是架构师一个人能解决的，但是如果是在没有这些Devops系统时，就更应该由架构师针对整个公司环境给出相关的方案。 如果说这些都不是架构师的活，那请问架构师的意义何在？ 这里还要说一句，在我经历的很多项目和团队中，没有架构师，只有一个开发Leader，我很想说那么这些就应该归属到项目Leader身上去发现和解决，而不是无穷无尽的分配任务。 架构师如何入门？不是说任何人看了几篇秒杀系统如何设计就是架构师了，说系统要添加缓存系统、链路上全部添加日志和监控，然后对接了xx系统就可以。 基本上，所有不是从软件工程师成长的架构师都不算架构师。 架构师，虽然有很多方向，我这边就只说一下有关我这个大数据软件工程师需要的架构师吧 PPT能力：不能说PPT没有用，只要负责的将系统的需求和功能阐述给软件开发工程师，那么软件工程师何来那么多的怨念 编程能力 平台能力：CICD、监控、日志、K8s、Linux 算法和网络协议 云平台能力（其实我觉的云平台一直是一种伪能力，因为如果你有本地部署的能力，云平台肯定没有问题。关键是现在很多架构师都决定使用云平台，但是呢，从来没有完整的看完云平台的能力和适用场景，导致很多不适用的问题，真是拍脑袋的决定） 任何没有掌握以上能力的架构师，不配拥有我这枚程序员；或者说，难道我一直在拿着程序员的工资，干着架构师的活？ 结语天下软件工程师苦架构师久矣，愿每个程序员都能遇到最好的架构师。","link":"/2023-11-01-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%9C%A8%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F%E6%9E%B6%E6%9E%84%E5%B8%88%E5%9C%A8%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"},{"title":"三十崩溃","text":"今年三十一了，正是壮年，却不得不对这个世界崩溃了。一波公司寒冬，只能赤裸裸的发抖。 回首看，自己在过去的哪些年里，并没有达成什么成就，也没有什么值得骄傲的事迹。朋友们也都寥寥草草的散了，越走越远；身上的贷款越来越多，家庭的压力也越来越重。明明觉得自己薪资还算可以，转眼就发现被房贷掏空，成了上岸的鱼，成了裸奔的穷人。 所以，活着成了问题，活好成了幻想。 过去想想很多事都可以拿来说说，可是都抛了鸽子。 因为懒惰放弃了锻炼，因为懒惰放弃了博客，因为懒惰放弃了搞开源，到现在，服务器买了，也空置了好久，也不知道还有什么可以拿来挽回的。 现在有个人说，人的惰性是需要锻炼的，像锻炼身体一样天天执行，而不是一开始定一个长远的目标。 我打算做些开源项目，想搞钱是肯定的，幻想能自己做成一番事业，但是不切实际，就像馅饼会从天上掉下来。放低所有的预期，我争取先把项目创建出来，写一些java的后台模板，顺便清理下收藏夹的灰尘。我猜想，光收藏夹清灰就可以写好多天博客了。 活在当下，我想，先做些简单的事。继续写写博客，天天锻炼身体。 结束其实还想聊的，社会和个人什么的，但是太自我了，大家理解都不一样，就算了，写太长也没动力，反正还是埋怨的。 只说一点吧，我会觉得，有时候不是自己懒惰，而是社会和工作没有给我们休息的时间，在内耗中我们度过了一事无成的余生。","link":"/2024-10-24-%E4%B8%89%E5%8D%81%E5%B4%A9%E6%BA%83/"},{"title":"任务调度器","text":"今天整理收藏夹，看到了一个项目收藏：task-scheduler，所以今天的内容就是任务调度器相关的内容了，从单机到分布式的实现。 我遇到的调度器调度器在我的职业生涯中，印象最深、最重要的几个产品分别是：Hadoop Yarn、K8s、DolphinsScheduler、Argo Exec。虽然他们的工作职责差异性蛮大的，但是核心都实现了资源分配和调度的能力。 Hadoop Yarn：简介：Hadoop Yarn 是 Hadoop 生态系统中的一个关键组件，用于资源管理和作业调度。调度职责：Yarn 负责在 Hadoop 集群中找到满足业务的资源，帮助作业启动任务，管理作业的生命周期。 K8s（Kubernetes）：简介：Kubernetes 是一个开源的容器编排平台，自动化部署、扩展和管理容器化应用程序。调度职责：Kubernetes 的调度器负责将 Pod 放置到合适的节点上，以便对应节点上的 Kubelet 能够运行这些 Pod，考虑资源需求、亲和性、反亲和性、数据局部性等多种因素。 Dolphinscheduler：简介：Apache DolphinScheduler 是一个分布式、去中心化、易扩展的可视化 DAG 工作流任务调度系统。调度职责：DolphinScheduler 致力于解决数据处理流程中错综复杂的依赖关系，使调度系统在数据处理流程中开箱即用，支持多种任务类型和工作流的定时调度、依赖调度等。 Argo Exec：简介：Argo Workflows 是一个基于 Kubernetes CRD 实现的工作流管理工具，用于在 Kubernetes 上编排和管理系统作业和容器。调度职责：Argo Workflows 的 workflow-controller 组件负责解析用户创建的 CR 对象并启动 Pod 来真正运行流水线。 核心能力简单总结下上面的调度系统，核心能力分为以下，有可能只包含一两种（Yarn、K8s）： 资源管理，这里指能执行任务的资源，例如节点或者容器 任务编排，一般分为可视化编排，或者编程式编排 任务调度，将任务调度在节点上执行，并按照流程顺序执行所有的节点 所以，以后不管我们遇到什么样的调度系统、资源分配系统，都可以参考上面的系统概念和实现。而接下来，我要讲述的主要是：任务调度系统，要同时包含上述3种能力 调度系统中的角色 调度流程： 获取任务，调度器负责从存储中获取待执行的任务 获取资源，调度器从资源管理器中获取可以用来执行子任务的节点 分发子任务，调度器在将任务拆解成子任务后，将子任务分发到资源节点上执行 子任务完成后，资源节点可以将子任务状态，推送到调度器（或者被调度器拉取） 调度器重复3和4的步骤，直到所有的子任务完成，标识着任务完成。 调度器将任务结束的状态更新到存储中 调度角色： 任务存储：常见内存或者数据库存储任务信息 调度器：需要将任务拆分成子任务，并安排子任务调度到资源节点 资源管理器：管理集群中所有的资源节点状态，并分配给子任务资源 资源节点：资源节点上，一般运行资源节点监控服务，负责2个核心任务：1. 向资源管理器上报资源状态，2. 向调度器上报子任务状态 单机Java系统中的任务调度我们在单机Java系统中，实现一个任务调度的系统，可以做出以下的调整： 将线程池作为资源管理器，线程池中的线程作为资源节点；那么分发子任务就变成：提交线程任务 调度流程（DAG） 上面是一些常见的任务调度的流程，简单分类如下： 顺序执行 并发执行多个子任务，并阻塞等待所有子任务结束 根据条件执行分支 循环N次执行某一段任务流程 循环执行某一段任务流程，直到条件允许退出循环 详细设计任务信息Task这里的任务信息，负责存储整个任务的执行流程（DAG），简单用点和边的概念就可以表示一个任务DAG。 Node: id data type：节点类型 开始节点 结束节点 条件节点：根据执行结果，选择向下执行的边 Join节点：阻塞直到所有上游子任务成功结束后，才能执行 OneOf节点：阻塞直到任意一个上游子任务成功结束后，才能执行；并且取消所有其他的并行上游子任务 子任务节点：这个节点表示，节点内也是一个任务流；且存在执行N次或者执行直到条件满足才结束 Edge: id from to Task: edges nodes 注意： 如果不设置开始和结束节点类型的话，那么开始节点和结束节点，都需要计算 没有父节点的节点，都是可以开始执行 没有子节点的节点，都是可以在结束后终止 调度器接口 submit：提交任务 任务编排这种的话，建议有可视化页面，提供一些内置节点，支持用户手动创建任务。 注意： 对用户提交的任务进行DAG验证，防止出现死循环任务 单机Java调度系统的编程实战待续","link":"/2024-10-29-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","link":"/hello-world/"}],"tags":[{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"架构","slug":"架构","link":"/tags/%E6%9E%B6%E6%9E%84/"},{"name":"人生","slug":"人生","link":"/tags/%E4%BA%BA%E7%94%9F/"},{"name":"java,调度器","slug":"java-调度器","link":"/tags/java-%E8%B0%83%E5%BA%A6%E5%99%A8/"}],"categories":[{"name":"教程","slug":"教程","link":"/categories/%E6%95%99%E7%A8%8B/"}],"pages":[{"title":"about","text":"93年，男，南京工作，输出各种大数据和AI的平台化架构和能力。 口头禅： 唯爱与美食不可辜负 包括并不限于以下能力： 平台架构和文案输出 Java，Kotlin，Python，Go，C Spring、Netty、Zookeeper、Antlr Hadoop HDFS，Hadoop Yarn，Spark，Apache Hudi、Apache Arrow、Parquet MachineLearning、Seldon Framework、Kubeflow Docker、K8s、Argo Workflow Kafka Linux 前端：Vue、HTML、CSS、Javascript 运维及监控 CI/CD，Jenkins 联系方式： 微信：sanbuliuxin shenbinglife@163.com","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}